"""
TODO:
    - tax benefits(property tax/interest deductible, property depreciation)
    - loan paydown, property equity growth
    - property appreciation
    - projection of rent growth
"""


MONS_PER_YR = 12


def calculate_mortgage_monthly_payment(loan, years, apr):
    """ref: https://www.mtgprofessor.com/formulas.htm"""
    c = apr/MONS_PER_YR
    n = MONS_PER_YR * years
    return loan * (c * (1 + c)**n) / ((1 + c)**n - 1)


# == invest/out-of-pocket ==
PURCHASE_PRICE = 400000 # USER_INPUT

DOWNPAY_PERCENT = 20.00/100 # USER_INPUT, DEFAULT: 20.00%
DOWNPAY = PURCHASE_PRICE * DOWNPAY_PERCENT

EST_CLOSING_COST = 2.00/100 * PURCHASE_PRICE # USER_INPUT, DEFAULT: 2.00% * purchase_price

EST_ACTUAL_PURCASE_PRICE = DOWNPAY + EST_CLOSING_COST


# == financing/out-of-pocket ==
MORTGAGE_LOAN = PURCHASE_PRICE - DOWNPAY
MORTGAGE_LOAN_YRS = 30 # USER_INPUT, DEFAULT: 30yrs
EST_MORTGAGE_LOAN_APR = 4.50/100 # USER_INPUT, DEFAULT: 4.50%
EST_MONTHLY_MORTGAGE_LOAN_PAYMENT = \
    calculate_mortgage_monthly_payment(MORTGAGE_LOAN, MORTGAGE_LOAN_YRS, EST_MORTGAGE_LOAN_APR)
EST_ANNUAL_MORTGAGE_PAYMENT = EST_MONTHLY_MORTGAGE_LOAN_PAYMENT * MONS_PER_YR


# == tax/out-of-pocket ==
PROPERTY_TAX_RATE = 1.50/100 # USER_INPUT, DEFAULT: 1.50%
ANNUAL_PROPERTY_TAX = PURCHASE_PRICE * PROPERTY_TAX_RATE

# == expense/out-of-pocket ==
EST_MONTHLY_HOA_EXPENSE = 0 # USER_INPUT, DEFAULT: 0
EST_ANNUAL_HOA_EXPENSE = EST_MONTHLY_HOA_EXPENSE * MONS_PER_YR

EST_ANNUAL_HOME_INSURANCE_EXPENSE = 0.05/100 * PURCHASE_PRICE # USER_INPUT, DEFAULT: 0.05% * purchase_price

EST_ANNUAL_REPAIR_RESERVE_EXPENSE = 1.00/100 * PURCHASE_PRICE # ??? USER_INPUT, DEFAULT: 1.00% * purchase_price

EST_ANNUAL_MISC_EXPENSE = \
    EST_ANNUAL_HOA_EXPENSE + \
    EST_ANNUAL_HOME_INSURANCE_EXPENSE + \
    EST_ANNUAL_REPAIR_RESERVE_EXPENSE


# == income/into-pocket ==
EST_VACANCY_PERCENT = 8.00/100 # USER_INPUT, DEFAULT: 8.00%

EST_MONTHLY_RENT = 2400 # USER_INPUT
EST_MONTHLY_EFFECTIVE_RENT =  EST_MONTHLY_RENT * (1 - EST_VACANCY_PERCENT)

EST_ANNUAL_GROSS_INCOME = EST_MONTHLY_EFFECTIVE_RENT * MONS_PER_YR


# == service/out-of-pocket ==
EST_ANNUAL_PROPERTY_MANAGER_SERVICE_FEE_RATE = 12.00/100 # USER_INPUT, DEFAULT: 12.00%
EST_ANNUAL_PROPERTY_MANAGER_SERVICE_FEE = EST_ANNUAL_PROPERTY_MANAGER_SERVICE_FEE_RATE * EST_ANNUAL_GROSS_INCOME

EST_ANNUAL_SERVICE_FEE = EST_ANNUAL_PROPERTY_MANAGER_SERVICE_FEE


# == total/out-of-pocket ==
EST_ANNUAL_TOTAL_EXPENSE = \
    EST_ANNUAL_MORTGAGE_PAYMENT + \
    ANNUAL_PROPERTY_TAX + \
    EST_ANNUAL_SERVICE_FEE + \
    EST_ANNUAL_MISC_EXPENSE
EST_MONTHLY_TOTAL_EXPENSE = EST_ANNUAL_TOTAL_EXPENSE / MONS_PER_YR


# == cash flow/into-pocket ==
EST_ANNUAL_NET_INCOME = EST_ANNUAL_GROSS_INCOME - EST_ANNUAL_TOTAL_EXPENSE
EST_MONTHLY_NET_INCOME = EST_ANNUAL_NET_INCOME / MONS_PER_YR


# == metric ==
# Capitalization Rate: return on income to property price
EST_CAP_RATE = EST_ANNUAL_NET_INCOME / PURCHASE_PRICE * 100

# Cash-on-Cash Return: return on income to actual money put in
EST_CASH_ON_CASH_RETURN = EST_ANNUAL_NET_INCOME / EST_ACTUAL_PURCASE_PRICE * 100


def main():
    print "HOUSE_VALUE: $%d" % PURCHASE_PRICE

    # out-of-pocket
    print "EST_OUT_OF_POCKET: $%d" % EST_ACTUAL_PURCASE_PRICE

    # balance sheet
    print "EST_MONTHLY_TOTAL_EXPENSE: -$%d" % EST_MONTHLY_TOTAL_EXPENSE
    print "\t%5.2f%%, %5d - EST_ANNUAL_MORTGAGE_PAYMENT" % (EST_ANNUAL_MORTGAGE_PAYMENT / EST_ANNUAL_TOTAL_EXPENSE * 100, EST_ANNUAL_MORTGAGE_PAYMENT/12)
    print "\t%5.2f%%, %5d - ANNUAL_PROPERTY_TAX" % (ANNUAL_PROPERTY_TAX / EST_ANNUAL_TOTAL_EXPENSE * 100, ANNUAL_PROPERTY_TAX/12)
    print "\t%5.2f%%, %5d - EST_ANNUAL_SERVICE_FEE" % (EST_ANNUAL_SERVICE_FEE / EST_ANNUAL_TOTAL_EXPENSE * 100, EST_ANNUAL_SERVICE_FEE/12)
    print "\t%5.2f%%, %5d - EST_ANNUAL_MISC_EXPENSE" % (EST_ANNUAL_MISC_EXPENSE / EST_ANNUAL_TOTAL_EXPENSE * 100, EST_ANNUAL_MISC_EXPENSE/12)

    print "EST_MONTHLY_EFFECTIVE_RENT: +$%d" % EST_MONTHLY_EFFECTIVE_RENT


    # into-pocket|cash flow
    print "EST_CASH_FLOW: $%d/mon, $%d/yr" % (EST_MONTHLY_NET_INCOME, EST_ANNUAL_NET_INCOME)
    print "EST_CAP_RATE: %.2f%%, %.2fyrs" % (EST_CAP_RATE, 100/EST_CAP_RATE)
    print "EST_CASH_ON_CASH_RETURN: %.2f%%, %.2fyrs" % (EST_CASH_ON_CASH_RETURN, 100/EST_CASH_ON_CASH_RETURN)


if __name__ == '__main__':
    main()
